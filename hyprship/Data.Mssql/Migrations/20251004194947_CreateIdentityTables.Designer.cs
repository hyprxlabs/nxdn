// <auto-generated />
using System;
using Hyprship.Data.Mssql;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Hyprship.Data.Mssql.Migrations
{
    [DbContext(typeof(MssqlDb))]
    [Migration("20251004194947_CreateIdentityTables")]
    partial class CreateIdentityTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "10.0.0-rc.1.25451.107")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Hyprship.Data.Models.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("name");

                    b.Property<string>("UpcaseName")
                        .IsRequired()
                        .HasMaxLength(38)
                        .HasColumnType("nvarchar(38)")
                        .HasColumnName("upcase_name");

                    b.HasKey("Id")
                        .HasName("pk_groups");

                    b.HasIndex("UpcaseName")
                        .IsUnique()
                        .HasDatabaseName("ix_groups_upcase_name");

                    b.ToTable("groups", (string)null);
                });

            modelBuilder.Entity("Hyprship.Data.Models.GroupClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("claim_value");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("group_id");

                    b.HasKey("Id")
                        .HasName("pk_group_claims");

                    b.HasIndex("GroupId")
                        .HasDatabaseName("ix_group_claims_group_id");

                    b.ToTable("group_claims", (string)null);
                });

            modelBuilder.Entity("Hyprship.Data.Models.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(38)
                        .HasColumnType("nvarchar(38)")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("name");

                    b.Property<string>("UpcaseName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("upcase_name");

                    b.HasKey("Id")
                        .HasName("pk_roles");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_role_name")
                        .HasFilter("[name] IS NOT NULL");

                    b.ToTable("roles", (string)null);
                });

            modelBuilder.Entity("Hyprship.Data.Models.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("claim_value");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("role_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_role_claims");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_role_claims_role_id");

                    b.ToTable("role_claims", (string)null);
                });

            modelBuilder.Entity("Hyprship.Data.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(38)
                        .HasColumnType("nvarchar(38)")
                        .HasColumnName("concurrency_stamp");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("email");

                    b.Property<bool>("IsServiceAccount")
                        .HasColumnType("bit")
                        .HasColumnName("is_service_account");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("last_login_at");

                    b.Property<string>("SecurityStamp")
                        .HasMaxLength(38)
                        .HasColumnType("nvarchar(38)")
                        .HasColumnName("security_stamp");

                    b.Property<string>("UpcaseEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("upcase_email");

                    b.Property<string>("UpcaseUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("upcase_user_name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_users_upcase_email")
                        .HasFilter("[email] IS NOT NULL");

                    b.HasIndex("UserName")
                        .IsUnique()
                        .HasDatabaseName("ix_users_upcase_user_name")
                        .HasFilter("[user_name] IS NOT NULL");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("Hyprship.Data.Models.UserApiKey", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("expires_at");

                    b.Property<string>("KeyDigest")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)")
                        .HasColumnName("key_digest");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_api_keys");

                    b.HasIndex("UserId", "Name")
                        .IsUnique()
                        .HasDatabaseName("ix_user_api_keys_user_id_name");

                    b.ToTable("user_api_keys", (string)null);
                });

            modelBuilder.Entity("Hyprship.Data.Models.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("claim_value");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_claims");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_claims_user_id");

                    b.ToTable("user_claims", (string)null);
                });

            modelBuilder.Entity("Hyprship.Data.Models.UserLoginProvider", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("login_provider");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("provider_key");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("provider_display_name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("pk_user_login_provider");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_login_provider_user_id");

                    b.ToTable("user_login_provider", (string)null);
                });

            modelBuilder.Entity("Hyprship.Data.Models.UserLoginProviderToken", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("login_provider");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("pk_user_login_provider_tokens");

                    b.ToTable("user_login_provider_tokens", (string)null);
                });

            modelBuilder.Entity("Hyprship.Data.Models.UserPasskey", b =>
                {
                    b.Property<byte[]>("CredentialId")
                        .HasMaxLength(1024)
                        .HasColumnType("varbinary(1024)")
                        .HasColumnName("credential_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.HasKey("CredentialId")
                        .HasName("pk_user_passkeys");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_passkeys_user_id");

                    b.ToTable("user_passkeys", (string)null);
                });

            modelBuilder.Entity("Hyprship.Data.Models.UserPasswordAuth", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int")
                        .HasColumnName("access_failed_count");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("concurrency_stamp");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("expires_at");

                    b.Property<bool>("IsEmailVerified")
                        .HasColumnType("bit")
                        .HasColumnName("is_email_verified");

                    b.Property<bool>("IsLockoutEnabled")
                        .HasColumnType("bit")
                        .HasColumnName("is_lockout_enabled");

                    b.Property<bool>("IsPhoneNumberVerified")
                        .HasColumnType("bit")
                        .HasColumnName("is_phone_number_verified");

                    b.Property<bool>("IsTwoFactorEnabled")
                        .HasColumnType("bit")
                        .HasColumnName("is_two_factor_enabled");

                    b.Property<DateTimeOffset?>("LockoutEndsAt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("lockout_ends_at");

                    b.Property<string>("PasswordDigest")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("password_digest");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("phone_number");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("security_stamp");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("UserId")
                        .HasName("pk_user_password_auth");

                    b.ToTable("user_password_auth", (string)null);
                });

            modelBuilder.Entity("groups_admins", b =>
                {
                    b.Property<Guid>("AdminsId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("admins_id");

                    b.Property<Guid>("GroupsId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("groups_id");

                    b.HasKey("AdminsId", "GroupsId")
                        .HasName("pk_groups_admins");

                    b.HasIndex("GroupsId")
                        .HasDatabaseName("ix_groups_admins_groups_id");

                    b.ToTable("groups_admins", (string)null);
                });

            modelBuilder.Entity("groups_roles", b =>
                {
                    b.Property<Guid>("GroupsId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("groups_id");

                    b.Property<Guid>("RolesId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("roles_id");

                    b.HasKey("GroupsId", "RolesId")
                        .HasName("pk_groups_roles");

                    b.HasIndex("RolesId")
                        .HasDatabaseName("ix_groups_roles_roles_id");

                    b.ToTable("groups_roles", (string)null);
                });

            modelBuilder.Entity("user_api_keys_roles", b =>
                {
                    b.Property<Guid>("RolesId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("roles_id");

                    b.Property<Guid>("UserApiKeysId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_api_keys_id");

                    b.HasKey("RolesId", "UserApiKeysId")
                        .HasName("pk_user_api_keys_roles");

                    b.HasIndex("UserApiKeysId")
                        .HasDatabaseName("ix_user_api_keys_roles_user_api_keys_id");

                    b.ToTable("user_api_keys_roles", (string)null);
                });

            modelBuilder.Entity("users_roles", b =>
                {
                    b.Property<Guid>("RolesId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("roles_id");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("users_id");

                    b.HasKey("RolesId", "UsersId")
                        .HasName("pk_users_roles");

                    b.HasIndex("UsersId")
                        .HasDatabaseName("ix_users_roles_users_id");

                    b.ToTable("users_roles", (string)null);
                });

            modelBuilder.Entity("Hyprship.Data.Models.GroupClaim", b =>
                {
                    b.HasOne("Hyprship.Data.Models.Group", "Group")
                        .WithMany("Claims")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_group_claims_group_group_id");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("Hyprship.Data.Models.RoleClaim", b =>
                {
                    b.HasOne("Hyprship.Data.Models.Role", "Role")
                        .WithMany("Claims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_role_claims_role_role_id");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Hyprship.Data.Models.UserApiKey", b =>
                {
                    b.HasOne("Hyprship.Data.Models.User", "User")
                        .WithMany("ApiKeys")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_api_keys_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Hyprship.Data.Models.UserClaim", b =>
                {
                    b.HasOne("Hyprship.Data.Models.User", "User")
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_claims_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Hyprship.Data.Models.UserLoginProvider", b =>
                {
                    b.HasOne("Hyprship.Data.Models.User", "User")
                        .WithMany("LoginProviders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_login_provider_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Hyprship.Data.Models.UserLoginProviderToken", b =>
                {
                    b.HasOne("Hyprship.Data.Models.User", "User")
                        .WithMany("LoginProviderTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_login_provider_tokens_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Hyprship.Data.Models.UserPasskey", b =>
                {
                    b.HasOne("Hyprship.Data.Models.User", "User")
                        .WithMany("Passkeys")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_passkeys_users_user_id");

                    b.OwnsOne("Hyprx.AspNetCore.Identity.IdentityPasskeyData", "Data", b1 =>
                        {
                            b1.Property<byte[]>("UserPasskeyCredentialId");

                            b1.Property<byte[]>("AttestationObject")
                                .IsRequired();

                            b1.Property<byte[]>("ClientDataJson")
                                .IsRequired();

                            b1.Property<DateTimeOffset>("CreatedAt");

                            b1.Property<bool>("IsBackedUp");

                            b1.Property<bool>("IsBackupEligible");

                            b1.Property<bool>("IsUserVerified");

                            b1.Property<string>("Name");

                            b1.Property<byte[]>("PublicKey")
                                .IsRequired();

                            b1.Property<long>("SignCount");

                            b1.PrimitiveCollection<string>("Transports");

                            b1.HasKey("UserPasskeyCredentialId");

                            b1.ToTable("user_passkeys");

                            b1.ToJson("data");

                            b1.WithOwner()
                                .HasForeignKey("UserPasskeyCredentialId")
                                .HasConstraintName("fk_user_passkeys_user_passkeys_credential_id");
                        });

                    b.Navigation("Data")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Hyprship.Data.Models.UserPasswordAuth", b =>
                {
                    b.HasOne("Hyprship.Data.Models.User", "User")
                        .WithOne("PasswordAuth")
                        .HasForeignKey("Hyprship.Data.Models.UserPasswordAuth", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_password_auth_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("groups_admins", b =>
                {
                    b.HasOne("Hyprship.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("AdminsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_groups_admins_users_admins_id");

                    b.HasOne("Hyprship.Data.Models.Group", null)
                        .WithMany()
                        .HasForeignKey("GroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_groups_admins_groups_groups_id");
                });

            modelBuilder.Entity("groups_roles", b =>
                {
                    b.HasOne("Hyprship.Data.Models.Group", null)
                        .WithMany()
                        .HasForeignKey("GroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_groups_roles_groups_groups_id");

                    b.HasOne("Hyprship.Data.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_groups_roles_roles_roles_id");
                });

            modelBuilder.Entity("user_api_keys_roles", b =>
                {
                    b.HasOne("Hyprship.Data.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_api_keys_roles_roles_roles_id");

                    b.HasOne("Hyprship.Data.Models.UserApiKey", null)
                        .WithMany()
                        .HasForeignKey("UserApiKeysId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_api_keys_roles_user_api_keys_user_api_keys_id");
                });

            modelBuilder.Entity("users_roles", b =>
                {
                    b.HasOne("Hyprship.Data.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_users_roles_role_roles_id");

                    b.HasOne("Hyprship.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_users_roles_users_users_id");
                });

            modelBuilder.Entity("Hyprship.Data.Models.Group", b =>
                {
                    b.Navigation("Claims");
                });

            modelBuilder.Entity("Hyprship.Data.Models.Role", b =>
                {
                    b.Navigation("Claims");
                });

            modelBuilder.Entity("Hyprship.Data.Models.User", b =>
                {
                    b.Navigation("ApiKeys");

                    b.Navigation("Claims");

                    b.Navigation("LoginProviderTokens");

                    b.Navigation("LoginProviders");

                    b.Navigation("Passkeys");

                    b.Navigation("PasswordAuth");
                });
#pragma warning restore 612, 618
        }
    }
}
